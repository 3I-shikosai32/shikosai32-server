generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider                              = "prisma-nestjs-graphql"
  output                                = "./generated"
  outputFilePattern                     = "{model}/{name}/{type}.ts"
  noAtomicOperations                    = true
  purgeOutput                           = true
  noTypeId                              = true
  requireSingleFieldsInWhereUniqueInput = ture
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Character {
  TREE
  FOX
  GOKU
  CAT
  PUDDING
  REAPER
}

enum Game {
  NONE
  XENO
  COIN_DROPPING
  ICE_RAZE
  PRESIDENT
  POKER
  WE_DIDNT_PLAYTEST
}

model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  email String
  role  Role   @default(USER)

  totalPointDay1  Int @default(0) @map("total_point_day1")
  totalPointDay2  Int @default(0) @map("total_point_day2")
  consumablePoint Int @default(0) @map("consumption_point")

  participateGame Game @default(NONE) @map("participate_game")

  pullableGachaTimes Int @default(0) @map("pullable_gacha_times")

  characterStatuses CharacterStatus[]

  giftHistories GiftHistory[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("users")
}

type ItemCompletedHistory {
  isDelivered Boolean @default(false) @map("is_delivered")

  createdAt   DateTime  @default(now()) @map("created_at")
  deliveredAt DateTime? @map("delivered_at")
}

model CharacterStatus {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  character Character
  iconUrl   String    @map("icon_url")
  avatarUrl String    @map("avatar_url")

  isActive Boolean @map("is_active")

  characterPointDay1 Int @default(0) @map("character_point_day1")
  characterPointDay2 Int @default(0) @map("character_point_day2")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id") @db.ObjectId

  items                Item[]                @relation(fields: [itemIds], references: [id])
  itemIds              String[]              @map("item_ids") @db.ObjectId
  itemCompletedHistory ItemCompletedHistory? @map("item_completed_history")

  @@map("character_statuses")
}

model Item {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  iconUrl  String @map("icon_url")
  layerUrl String @map("layer_url")

  character Character
  layer     Int

  characterStatuses  CharacterStatus[] @relation(fields: [characterStatusIds], references: [id])
  characterStatusIds String[]          @map("characterStatus_ids") @db.ObjectId

  @@map("items")
}

model Gift {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  iconUrl String @map("icon_url")

  price     Int
  remaining Int

  giftHistories GiftHistory[]

  @@map("gifts")
}

model GiftHistory {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  isDelivered Boolean @default(false) @map("is_delivered")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id") @db.ObjectId

  exchangedGift Gift   @relation(fields: [giftId], references: [id])
  giftId        String @map("gift_id") @db.ObjectId

  createdAt   DateTime  @default(now()) @map("created_at")
  deliveredAt DateTime? @map("delivered_at")

  @@map("gift_histories")
}

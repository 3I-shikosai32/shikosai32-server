# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type CaharacterItem {
  itemUrl: String!
  obtained: Boolean!
}

input CaharacterItemCompositeListFilter {
  equals: [CaharacterItemObjectEqualityInput!]
  every: CaharacterItemWhereInput
  isEmpty: Boolean
  isSet: Boolean
  none: CaharacterItemWhereInput
  some: CaharacterItemWhereInput
}

input CaharacterItemObjectEqualityInput {
  itemUrl: String!
  obtained: Boolean!
}

input CaharacterItemWhereInput {
  AND: [CaharacterItemWhereInput!]
  NOT: [CaharacterItemWhereInput!]
  OR: [CaharacterItemWhereInput!]
  itemUrl: StringFilter
  obtained: BoolFilter
}

enum Character {
  CAT
  FOX
  GOKU
  PUDDING
  REAPER
  TREE
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumCharacterFilter {
  equals: Character
  in: [Character!]
  not: NestedEnumCharacterFilter
  notIn: [Character!]
}

input EnumGameFilter {
  equals: Game
  in: [Game!]
  not: NestedEnumGameFilter
  notIn: [Game!]
}

input EnumGiftNameFilter {
  equals: GiftName
  in: [GiftName!]
  not: NestedEnumGiftNameFilter
  notIn: [GiftName!]
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

enum Game {
  COIN_DROPPING
  ICE_RAZE
  NONE
  POKER
  PRESIDENT
  WE_DIDNT_PLAYTEST
  XENO
}

input GiftHistoryListRelationFilter {
  every: GiftHistoryWhereInput
  none: GiftHistoryWhereInput
  some: GiftHistoryWhereInput
}

input GiftHistoryWhereInput {
  AND: [GiftHistoryWhereInput!]
  NOT: [GiftHistoryWhereInput!]
  OR: [GiftHistoryWhereInput!]
  createdAt: DateTimeFilter
  exchangedGift: GiftRelationFilter!
  giftId: StringFilter!
  id: StringFilter
  isDelivered: BoolFilter!
  user: UserRelationFilter!
  userId: StringFilter!
}

enum GiftName {
  BABY_STAR
  CABAGGE
  MOROKOSHI
  UMAIBO_CHEESE
  UMAIBO_CORN_POTAGE
  UMAIBO_MENTAIKO
}

input GiftRelationFilter {
  is: GiftWhereInput
  isNot: GiftWhereInput
}

input GiftWhereInput {
  AND: [GiftWhereInput!]
  NOT: [GiftWhereInput!]
  OR: [GiftWhereInput!]
  createdAt: DateTimeFilter
  giftHistories: GiftHistoryListRelationFilter
  iconUrl: StringFilter
  id: StringFilter
  name: EnumGiftNameFilter
  price: IntFilter
  remaining: IntFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumCharacterFilter {
  equals: Character
  in: [Character!]
  not: NestedEnumCharacterFilter
  notIn: [Character!]
}

input NestedEnumGameFilter {
  equals: Game
  in: [Game!]
  not: NestedEnumGameFilter
  notIn: [Game!]
}

input NestedEnumGiftNameFilter {
  equals: GiftName
  in: [GiftName!]
  not: NestedEnumGiftNameFilter
  notIn: [GiftName!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

type NestedGiftHistory {
  createdAt: DateTime!
  giftId: String!
  id: String!
  isDelivered: Boolean!
  userId: String!
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  findUser(where: UserWhereUniqueInput!): User
  findUsers(cursor: UserWhereUniqueInput, orderBy: [UserOrderInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  tmp: String!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  ADMIN
  USER
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  avatarUrl: String!
  character: Character!
  characterItems: [CaharacterItem!]!
  consumablePoint: Int!
  createdAt: DateTime!
  email: String!
  giftHistories: [NestedGiftHistory!]!
  iconUrl: String!
  id: String!
  name: String!
  participateGame: Game!
  pullableGachaTimes: Int!
  role: Role!
  totalPointDay1: Int!
  totalPointDay2: Int!
}

input UserOrderInput {
  createdAt: SortOrder
  name: SortOrder
  totalPointDay1: SortOrder
  totalPointDay2: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  avatarUrl: StringFilter
  character: EnumCharacterFilter
  consumablePoint: IntFilter
  createdAt: DateTimeFilter
  email: StringFilter
  giftHistories: GiftHistoryListRelationFilter
  iconUrl: StringFilter
  id: StringFilter
  items: CaharacterItemCompositeListFilter
  name: StringFilter
  participateGame: EnumGameFilter
  pullableGachaTimes: IntFilter
  role: EnumRoleFilter
  totalPointDay1: IntFilter
  totalPointDay2: IntFilter
}

input UserWhereUniqueInput {
  id: String!
}